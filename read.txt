# 这是一个文本文件，测试git
# 刚刚完成了一个新的命令学习：
# 1、git init
# 2、git add <file>
# 3、git commit -m 'xxx'
# 4、查看git 状态
	git status #告诉你现在git的状态，是否有修改，是否有提交修改
# 5、查看最近修改
	git diff #没有提交的修改会以绿色标注出来
# 准备学习版本回退
# 6、使用git log查看提交版本
# 7、使用 git reset --hard HEAD^ 回退到上一个版本，其中^代表上一个，^^代表上上一个，依次类推
	git reset --hard HEAD^
# 8、使用git reset --hard <commit id>可以转到任意版本，包括回到过去，现在。
	git reset --hard 246b7d3
# 9、时光穿梭前，通过 git reflog 查看历史命令，找到commit id
	git reflog

# 10、git add \<filename\>把文件添加进去，实际上就是把文件修改添加到暂存区；git commit -m ‘xxx’提交修改，把暂存区的所有内容提交到当前分支
_我们创建版本库时，Git自动创建了master分支_

# 11、Git 跟踪的是文件的修改，而非文件
#12、(1)改乱了工作区某个文件内容（修改文件了，没有提交到暂存区),使用命令 git checkout --<filename>
	 (2)已经提交到暂存区，想放弃修改，分两步走：第一步使用命令 git reset HEAD <filename>;第二步使用命令 git checkout --<filename>
	 (3)已经提交到版本库时，要撤销修改，使用版本回退，分两步走：第一步使用命令git reflog，查看 commit id;第二步使用命令 git reset --hard <commit id>
	 (4)已经提交到远程库，这个暂时没有办法，看后续更新
#13、删除文件
	(1)Mac 命令： rm <filename>删除文件
	(2)这时有两种情况，第一种刚才属于错误操作，你需要恢复文件，使用命令 git checkout -- <filename> 撤销删除；第二种，从版本库删除文件，使用命令 git rm <filename>,git commit -m 'xxx'连续连个命令
	--注意了：git checkout --<filename> 命令其实是用版本库的文件替换工作区的文件
#14、远程仓库操作
	(1)第一步 创建SSH Key,一路默认下来，在用户主目录找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，即密钥对，其中id_rsa.pub是公钥，可以放心告诉别人。
	ssh-keygen -t rsa -C "zhu-hero@qq.com"
	(2)第二步，登录GitHub,打开Account settings,ssh keys页面，点击 add ssh key 填上任意title,在key文本框中粘贴id_rsa.pub文件的内容
	—-注意：GitHub通过SSH Key 识别推送人身份，也就是意味着，在多台电脑上分别提交内容时，需要对应生成SSH Key,并且添加到GitHub
#15、远程仓库同步
	(1)、如果是第一次操作，需要在GitHub创建一个repository
	(2)、根据提示，使用命令 git remote add origin https://github.com/Moxikai/learn_git.git，添加完成后，远程库的名字就是origin
	(3)、推送本地库内容到远程库，使用git push命令：第一次推送，使用 git push -u origin master,-u参数实现本地master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来
	(4)、后续同步，只需要命令 git push original master
#16、克隆远程库
	(1)使用命令git clone git@github.com:Moxikai/test_clone1.git 或者 https://github.com/Moxikai/test_clone1.git
	其中 git@github.com:Moxikai/test_clone1.git和https://github.com/Moxikai/test_clone1.git为远程仓库地址
	使用SSH速度更快，推荐这种方式
#17、分支管理
#17.1、创建分支
	(1)使用命令 git checkout -b dev
	-b参数表示创建并切换，相当于 git branch dev,git checkout dev这两条命令
	(2)列出所有分支
	使用命令 git branch
	*表示当前当前分支
	(3)在当前分支上提交修改，使用命令 git add <filename>
	(4)切换分支，使用命令 git checkout master
	(5)合并分支使用命令git merge dev，其中dev是分支名称
	(6)合并完成后，使用命令 git branch -d dev 删除分支
	(7)总结：
		git branch #查看分支
		git branch <name> #创建分支
		git checkout <name> #切换分支
		git checkout -b <name> #创建并切换分支
		git merge <name> #合并某分支到当前分支
		git branch -d <name> #删除分支
#17.2 解决冲突
		(1)两个分支在相同地方有不同的修改，这是feature1
